require 'devise'

require 'devise_cas_authenticatable/schema'
require 'devise_cas_authenticatable/routes'
require 'devise_cas_authenticatable/strategy'
require 'devise_cas_authenticatable/exceptions'

require 'rubycas-client'
require 'casclient/frameworks/rails/filter'

# Register as a Rails engine if Rails::Engine exists
begin
  Rails::Engine
rescue
else
  module DeviseCasAuthenticatable
    class Engine < Rails::Engine
    end
  end
end

module Devise
  # The base URL of the CAS server.  For example, http://cas.example.com.  Specifying this
  # is mandatory.
  @@cas_base_url = nil
  
  # The login URL of the CAS server.  If undefined, will default based on cas_base_url.
  @@cas_login_url = nil
  
  # The login URL of the CAS server.  If undefined, will default based on cas_base_url.
  @@cas_logout_url = nil
  
  # The login URL of the CAS server.  If undefined, will default based on cas_base_url.
  @@cas_validate_url = nil

  # Should devise_cas_authenticatable enable single-sign-out?
  # True by default.
  @@cas_enable_single_sign_out = true
  
  # Should devise_cas_authenticatable attempt to create new user records for
  # unknown usernames?  True by default.
  @@cas_create_user = true
  
  mattr_accessor :cas_base_url, :cas_login_url, :cas_logout_url, :cas_enable_single_sign_out, :cas_validate_url
  mattr_reader :cas_create_user
  module_eval { alias_method :cas_create_user?, :cas_create_user }
  
  # Return a CASClient::Client instance based on configuration parameters.
  def self.cas_client
    @@cas_client ||= CASClient::Client.new(
        :cas_base_url => @@cas_base_url,
        :login_url => @@cas_login_url,
        :logout_url => @@cas_logout_url,
        :validate_url => @@cas_validate_url,
        :enable_single_sign_out => @@cas_enable_single_sign_out
      )
  end
end

Devise.add_module(:cas_authenticatable,
  :strategy => true,
  :controller => :cas_sessions,
  :route => :cas_authenticatable,
  :model => 'devise_cas_authenticatable/model')

# Hook into session store's create method in order
# to record the session id generated by a CAS ticket.
# This file record then allows us to later look up
# the session for destroying it on a single-sign-out request.
class ActiveRecord::SessionStore::Session < ActiveRecord::Base
  def create_with_session_stored
    result = create_without_session_stored
    if ::Devise.cas_enable_single_sign_out && result && 
        self.data['cas_devise_resouce_name'] && self.data['cas_last_valid_ticket']

      eval(self.data['cas_devise_resouce_name']).store_service_session_lookup(
        self.data['cas_last_valid_ticket'], self.session_id
      )
    end

    return result
  end
  alias_method_chain :create, :session_stored

end
